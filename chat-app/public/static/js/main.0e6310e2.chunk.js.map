{"version":3,"sources":["App.tsx","index.tsx"],"names":["sendIoMessage","connection","endpoint","message","onError","emit","MessagesList","messages","id","users","lastTableElementRef","useRef","previousMessagesRef","sort","a","b","Date","parse","time_stamp","usersById","Object","fromEntries","map","user","toString","lastMessageIndex","length","messagesList","index","userFrom","from","style","fontWeight","time","content","width","toLocaleTimeString","hour","minute","hour12","color","username","ref","useLayoutEffect","current","JSON","stringify","scrollIntoView","className","Table","responsive","striped","bordered","hover","UserList","theUser","find","otherUsers","filter","number_of_connections","otherUserRows","App","useState","error","chatState","setChatState","connectionRef","setUserId","useEffect","fetch","response","ok","parseInt","text","responseId","io","connect","on","msg","getId","sendMessage","useCallback","updateName","new_name","updateColor","new_color","useChatApp","input","setInput","onButtonClick","evt","preventDefault","trimmed","trim","startsWith","nameMatch","match","Error","getNameUpdateFromInput","toUpperCase","getColorUpdateFromInput","emojiedInput","replace","replaceEmojisInput","e","Spinner","animation","Modal","show","onHide","Header","closeButton","Title","Body","Container","Form","onSubmit","InputGroup","FormControl","onChange","event","target","value","placeholder","aria-label","Append","Button","variant","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e6310e2.chunk.js","sourcesContent":["import React, {ChangeEvent, SyntheticEvent, useCallback, useEffect, useLayoutEffect, useRef, useState} from 'react';\nimport './App.css';\nimport {io, Socket} from 'socket.io-client';\nimport {Button, Container, Form, FormControl, InputGroup, Modal, Spinner, Table} from \"react-bootstrap\";\n\ninterface User{\n    id:number;\n    username:string;\n    color:string;\n    number_of_connections:number;\n}\ninterface Message {\n    time_stamp:string\n    from:number;\n    content:string;\n}\ninterface ChatState{\n    users:User[];\n    messages:Message[];\n}\n\nfunction sendIoMessage(connection:Socket|null,endpoint:string,message:string,onError:(error_message: string)=>void){\n    if(connection===null){\n        onError(\"error, no connection to server\");\n    }\n    else{\n        connection.emit(endpoint,message);\n    }\n}\nfunction useChatApp(onError:(error_message: string)=>void){\n    const [chatState,setChatState]=useState<ChatState>({users:[],messages:[]})\n    const connectionRef=useRef<Socket|null>(null);\n    const [id,setUserId]=useState<number|null>(null);\n\n    useEffect(()=>{\n        const getId=async ()=>{\n            try{\n                const response= await fetch(\"/userId\");\n                if(response.ok){\n                    const responseId=parseInt(await response.text())\n                    setUserId(responseId);\n                    const connection=io().connect();\n                    connection.on(\"chat_state\",(msg:string)=>setChatState(JSON.parse(msg)));\n                    connection.on(\"input_error\",(error:string)=>{onError(error);})\n                    connectionRef.current=connection;\n                }\n                else{\n                    onError( await response.text());\n                }\n            }catch (e){\n                onError(e.message);\n            }\n        }\n        getId()\n    },[onError]);\n\n    const sendMessage= useCallback((message:string)=>sendIoMessage(connectionRef.current,\"chat message\",message,onError),[connectionRef,onError]);\n    const updateName=useCallback((new_name:string)=>sendIoMessage(connectionRef.current,\"rename\",new_name,onError),[connectionRef,onError]);\n    const updateColor=useCallback((new_color:string)=>sendIoMessage(connectionRef.current,\"recolor\",\"#\"+new_color,onError),[connectionRef,onError]);\n    return {...chatState,id,sendMessage,updateName,updateColor};\n}\n\nfunction replaceEmojisInput(trimmed: string) {\n    return trimmed.replace(/[:][)]/,\"üòÅ\").replace(/[:][(]/,\"üôÅ\").replace(/[:][o]/,\"üò≤\");\n}\n\nfunction getNameUpdateFromInput(trimmed: string) {\n    const nameMatch=trimmed.match(/^[/]name ([A-Za-z0-9]+)$/)\n    if (nameMatch===null){\n        throw new Error(\"invalid rename, please only use letters or numbers for name\");\n    }\n    else{\n        return nameMatch[1]\n    }\n}\n\nfunction getColorUpdateFromInput(trimmed: string) {\n    const nameMatch=trimmed.match(/^[/]color ([a-fA-F0-9]{6})$/)\n    if (nameMatch===null){\n        throw new Error(\"invalid color, please only use format '/color RRGGBB'\");\n    }\n    else{\n        return nameMatch[1].toUpperCase()\n    }\n}\nfunction MessagesList({messages,id,users}:{messages:Message[],id:number,users:User[]}){\n\n    const lastTableElementRef=useRef<any>(null)\n    const previousMessagesRef=useRef<Message[]|null>(null)\n\n\n    messages.sort((a,b)=>Date.parse(a.time_stamp) - Date.parse(b.time_stamp));\n\n\n    const usersById=Object.fromEntries(users.map(user=>[user.id.toString(),user]))\n    const lastMessageIndex=messages.length-1\n    const messagesList=messages.map((message,index)=> {\n        const userFrom=usersById[message.from.toString()]\n        let style={};\n        if(userFrom.id === id){\n            style={fontWeight:\"bold\"};\n        }\n        const time=new Date(message.time_stamp);\n        const content=<>\n            <td style={{width:\"15%\"}}>{time.toLocaleTimeString([],{ hour: '2-digit', minute: '2-digit',hour12: false})}</td>\n            <td style={{color:userFrom.color,width:\"15%\"}}>{userFrom.username}</td>\n            <td style={{width:\"70%\"}}>{message.content}</td>\n        </>\n        if(index === lastMessageIndex){\n            return <tr ref={lastTableElementRef} key={\"messagesUl\" + index} style={style}>\n                {content}\n            </tr>\n        }\n        else{\n            return <tr key={\"messagesUl\" + index} style={style}>\n                {content}\n            </tr>\n\n        }\n    })\n    useLayoutEffect(()=>{\n        if(lastTableElementRef.current!==null&&JSON.stringify(messages)!==JSON.stringify(previousMessagesRef.current)){\n            lastTableElementRef.current.scrollIntoView();\n        }\n        previousMessagesRef.current=messages;\n    },[messages])\n    return <div className={\"table-bottom-div\"}>\n        <Table responsive striped bordered hover>\n        <tbody>\n            {messagesList}\n        </tbody>\n    </Table>\n    </div>\n}\n\nfunction UserList({users,id}:{id:number,users:User[]}){\n    const theUser=users.find(user=>user.id === id);\n    const otherUsers=users.filter(user=>user.number_of_connections!==0&&user.id!==id);\n    otherUsers.sort();\n    if(typeof theUser=== \"undefined\"){\n        return <div>error, could not find user</div>\n    }\n    const otherUserRows=otherUsers.map(user=><tr key={user.username+\" user name row\"}><td style={{color:user.color}}>{user.username}</td></tr>)\n    return <Table responsive striped bordered hover>\n        <thead>\n            <tr>\n                <th>Users</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr><td style={{color:theUser.color}}>{theUser.username + \" (you)\"}</td></tr>\n            {otherUserRows}\n        </tbody>\n    </Table>\n}\n\n\nfunction App() {\n    const [error,onError]=useState<string|null>(null)\n    const {users,messages,id,sendMessage,updateName,updateColor}=useChatApp(onError);\n    const [input,setInput]=useState(\"\");\n    const onButtonClick=(evt: SyntheticEvent)=>{\n        evt.preventDefault();\n        const trimmed=input.trim();\n        try{\n            if(trimmed.startsWith(\"/name\")){\n                updateName(getNameUpdateFromInput(trimmed))\n                setInput(\"\");\n            }\n            else if (trimmed.startsWith(\"/color\")){\n                updateColor(getColorUpdateFromInput(trimmed))\n                setInput(\"\");\n            }\n            else if (trimmed.startsWith(\"/\")){\n                onError(`error, illegal command '${trimmed}'. /name and /color are the only available commands. lowercase is needed.`)\n            }\n            else if(trimmed!==\"\"){\n                const emojiedInput=replaceEmojisInput(trimmed)\n                sendMessage(emojiedInput);\n                setInput(\"\");\n            }\n        }catch (e){\n            onError(e.message)\n        }\n    }\n    const handleChange=(event:ChangeEvent<HTMLInputElement>)=>{\n        setInput(event.target.value);\n    }\n\n    if(id === null||users.length===0){\n        return <div className=\"loading\"><Spinner animation=\"border\" /></div>\n    }\n\n    else{\n        return <div className=\"App\">\n            <Modal show={error!==null} onHide={()=>onError(null)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Error</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{error}</Modal.Body>\n            </Modal>\n            <MessagesList messages={messages} id={id} users={users}/>\n            <UserList id={id} users={users}/>\n            <div className=\"centering\">\n                <Container>\n                    <Form onSubmit={onButtonClick}>\n                        <InputGroup>\n                            <FormControl onChange={handleChange} placeholder=\"message\"\n                                         aria-label=\"message\" value={input} onSubmit={onButtonClick}/>\n                            <InputGroup.Append>\n                                <Button variant=\"outline-secondary\" type=\"submit\">Send</Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Form>\n                </Container>\n            </div>\n        </div>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootswatch/dist/slate/bootstrap.min.css\";\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}